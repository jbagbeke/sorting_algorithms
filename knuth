#include "sort.h"

/**
 * knuth_seq - Generates number <= to size using the knuth seq
 * @num: Pointer to the number <= size
 * @size: Size of the array
 * Return: Void
 */
void knuth_seq(int *num, size_t size)
{
	int intval = 1;

	while (intval <= size)
	{
		*num = intval;
		intval = intval * 3 + 1;
	}
}

/**
 * final_pass - Performs insertion sort on array
 * @array: Array to perform sort on
 * @size: Size of the array
 * @intval: Interval from knuth sequence
 * Return: Void
 */
void final_pass(int *array, size_t size, int intval)
{
	int i, tmp;

	for (i = 0; i < size; i++)
	{
		if (i + intval <= size - 1)
		{
			if (array[i] > array[i + intval])
			{
				tmp = array[i];
				array[i] = array[i + intval];
				array[i + intval] = tmp;
			}
		}
	}
}

/**
 * shell_sort - Sorts an array using the shell sort algo
 * @array: the array to sort
 * @size: Size of the array
 * Return: Void
 */
void shell_sort(int *array, size_t size)
{
	int intval, i, n, tmp, j = 0;

	knuth_seq(&intval, size);
	
	while (intval >= 1)
	{
		for (i = 0; i < size; i++)
		{
			//j = i;

			//if ((i + intval) <= size - 1)
			//{
				/*//if (array[i] > array[i + intval])
				//{
					n = intval + i;

					while (j >= 0 && n >= 0 && array[n] < array[j])
					{
					tmp = array[j];
					array[j] = array[n];
					array[n] = tmp;

					--j;
					--n;
					}
				//}*/
				final_pass(array, size, intval);
			//}
		}

		intval = (intval - 1) / 3;

		//if (intval == 1)
			//final_pass(array, size);
		print_array(array, size);
	}

	//final_pass(array, size);
}



int main(void)
{
	   // int array[] = {19, 48, 99, 71, 13, 52, 96, 73, 86, 7};
	   int array[] = {19, 48, 99, 71, 13, 52, 96, 73, 86, 7, 23, 43, 33, 0, 1, 2, 34, 44, 3, 5, 6};
	        size_t n = sizeof(array) / sizeof(array[0]);

		printf("NOOOOO::: %ld\n", n);

		    print_array(array, n);
		        printf("\n");
			    shell_sort(array, n);
			        printf("\n");
				    print_array(array, n);
				        return (0);
}
