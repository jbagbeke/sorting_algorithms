#include "sort.h"

/**
 * insertion_sort_list - Sorts data using insertion algorithm
 * @list: Pointer to a pointer that points to the list to be sorted
 * Return: Void
 */
void insertion_sort_list(listint_t **list)
{
	listint_t *tmp1, *current, *tmp2, *reversed;

	if (!(*list) || !(*list)->next)
		return;

	current = *list;

	while (current->next)
	{
		if (current->n  > current->next->n)
		{
			reversed = current->next;
			while (reversed->prev && reversed->n < reversed->prev->n)
			{
				tmp1 = reversed->next;
				tmp2 = reversed->prev;
				tmp2->next = tmp1;

				if (tmp1)
					tmp1->prev = tmp2;

				reversed->prev = tmp2->prev;
				reversed->next = tmp2;

				if (tmp2->prev)
					tmp2->prev->next = reversed;

				tmp2->prev = reversed;
				if (reversed->prev == NULL)
					*list = reversed;
				current = reversed;
				print_list(*list);
			}
		}
		else
			current = current->next;
	}
}







listint_t *create_listint(const int *array, size_t size)
{
    listint_t *list;
    listint_t *node;
    int *tmp;

    list = NULL;
    while (size--)
    {
        node = malloc(sizeof(*node));
        if (!node)
            return (NULL);
        tmp = (int *)&node->n;
        *tmp = array[size];
        node->next = list;
        node->prev = NULL;
        list = node;
        if (list->next)
            list->next->prev = list;
    }
    return (list);
}

/**
 * main - Entry point
 *
 * Return: Always 0
 */
int main(void)
{
    listint_t *list;
    int array[] = {19, 48, 99, 71, 13, 52, 96, 73, 86, 7};
    size_t n = sizeof(array) / sizeof(array[0]);

    list = create_listint(array, n);
    if (!list)
        return (1);
    print_list(list);
    printf("\n");
    insertion_sort_list(&list);
    printf("\n");
    print_list(list);
    return (0);
}
